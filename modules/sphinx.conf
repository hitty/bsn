
source main {
     type               = mysql
     sql_host           = localhost
     sql_user           = bsn
     sql_pass           = ZBvlYSTLbRiXSOcEPCl5
     sql_query_pre      = set names utf8
     sql_query_pre      = set lc_time_names = 'ru_RU'
     sql_port        = 3306  # optional, default is 3306

 
}

######################################
#agencies
######################################
source agencies : main
{
     sql_db             = common
     
     sql_query_range    = SELECT MIN(id), MAX(id) FROM agencies
     
     sql_range_step     = 500
     
     sql_query         = SELECT a.id, 'agencies' as type, a.title, UNIX_TIMESTAMP(CURDATE()) as datetime, DATE_FORMAT(CURDATE(),'%e %M') as normal_date, CONCAT(IF(a.addr!='',a.addr,''),' ',a.phones) as content, CONCAT(     IF(activity & 1,'Агентство недвижимости, ',''),    IF(activity & 2,'Рекламное агентство, ',''),    IF(activity & 4,'Застройщик, ',''),    IF(activity & 8,'Управляющая компания',''),    IF(activity & 16,'Банк, ',''),    IF(activity & 32,'Девелопер, ',''),    IF(activity & 64,'Инвестор, ','')) as category, CONCAT('organizations/company/', a.id) as url, p.name AS photo, LEFT( p.name, 2 ) AS subfolder FROM common.agencies a LEFT JOIN common.agencies_photos p ON p.id = a.id_main_photo WHERE a.id >= $start AND a.id <= $end 

     sql_attr_string    = url
     sql_attr_string    = type
     sql_attr_string    = category
     sql_field_string   = title
     sql_field_string   = content
     sql_field_string   = normal_date
     sql_field_string   = photo
     sql_field_string   = subfolder
     sql_attr_timestamp = datetime

     sql_query_info     = SELECT title, content FROM common.agencies WHERE id = $id
}
index agencies
{
     source             = agencies
     path               = /var/lib/sphinxsearch/data/agencies
     docinfo            = extern
     mlock              = 0
     morphology         = stem_ru
     html_strip         = 1
     html_remove_elements = p, style, script
     charset_type       = utf-8
     min_word_len       = 2
}

######################################
#calendar_events
######################################
source calendar_events : main
{
     sql_db             = content
     
     sql_query_range    = SELECT MIN(id), MAX(id) FROM calendar_events
     
     sql_range_step     = 500
     
     sql_query         = SELECT a.id, 'calendar_events' as type, UNIX_TIMESTAMP(a.date_begin) as datetime, a.title, CONCAT(a.place,', ', a.text) as content, CONCAT('calendar/', a.id) as url,  c.title as category, IF(YEAR(a.date_begin)<Year(CURDATE()),DATE_FORMAT(a.date_begin,'%e %M %Y'),DATE_FORMAT(a.date_begin,'%e %M, %k:%i')) as normal_date, p.name AS photo, LEFT( p.name, 2 ) AS subfolder FROM calendar_events a   LEFT JOIN calendar_events_categories c ON c.id = a.id_category LEFT JOIN calendar_events_photos p ON p.id = a.id_main_photo WHERE a.id >= $start AND a.id <= $end 

     sql_attr_string    = url
     sql_attr_string    = type
     sql_attr_string    = category
     sql_field_string   = title
     sql_field_string   = content
     sql_field_string   = normal_date
     sql_field_string   = photo
     sql_field_string   = subfolder
     sql_attr_timestamp = datetime

     sql_query_info     = SELECT title, content FROM content.calendar_events WHERE id = $id
}
index calendar_events
{
     source             = calendar_events
     path               = /var/lib/sphinxsearch/data/calendar_events
     docinfo            = extern
     mlock              = 0
     morphology         = stem_ru
     html_strip         = 1
     html_remove_elements = p, style, script
     charset_type       = utf-8
     min_word_len       = 2
}

######################################
#news
######################################
source news : main
{
     sql_db             = content
     
     #запрос, который возвращает диапазон ID строк для последующего вычисления лимита при индексации. Например, 'SELECT MIN(`id`), MAX(`id`) FROM `topics`' вернет минимальный и максимальный ID тем форума, затем диапазон разделится на части, скажем, по 2000. Вернулся результат MIN=5 и MAX=5000, после вставит в первый запрос индексации $start=5, $end=2005, на втором запросе $start=2006, $end=4006 и т.д.
     sql_query_range    = SELECT MIN(id), MAX(id) FROM news
     
     #определяет шаг при лимите выборки. В нашем случае это 500
     sql_range_step     = 500
     
     #запрос выборки информации из базы для индексирования. Пишется в строку. Если вы переносите часть запроса в новую строку, то ставите перед переносом символ "\". Первое возвращаемое поле должно быть целочисленным, положительным и уникальным. Для этого подходит первичный ключ таблицы (оно будет использоваться как ID индексируемой строки). Можно использовать 2 переменные: $start и $end для получения частями информации для индексирования
     sql_query         = \
        SELECT n.id, 'news' as type, UNIX_TIMESTAMP(n.datetime) as datetime, n.title, CONCAT(n.content_short,', ', n.content) as content, n.chpu_title, n.views_count, c.title as category_title, c.code as category_code, r.title as region, r.code as region_code, IF(YEAR(n.datetime)<Year(CURDATE()),DATE_FORMAT(n.datetime,'%e %M %Y'),DATE_FORMAT(n.datetime,'%e %M, %k:%i')) as normal_date, p.name AS photo, LEFT( p.name, 2 ) AS subfolder,(SELECT COUNT(*) FROM comments WHERE comments_active = 1 AND id_parent = n.id AND parent_type = 1) as comments_count FROM news n   LEFT JOIN news_categories c ON c.id = n.id_category LEFT JOIN news_regions r ON r.id = n.id_region LEFT JOIN news_photos p ON p.id = n.id_main_photo WHERE n.id >= $start AND n.id <= $end 

     # Атрибут ID раздела. Необходим для фильтра, если поиск будет по определенной категории
     sql_attr_string    = type
     sql_field_string   = category_title
     sql_field_string   = chpu_title
     sql_field_string   = title
     sql_field_string   = content
     sql_field_string   = normal_date
     sql_field_string   = photo
     sql_field_string   = subfolder
     sql_field_string   = category_code
     sql_field_string   = region_code
     sql_field_string   = comments_count
     sql_field_string   = views_count
     sql_attr_timestamp = datetime

     sql_query_info     = SELECT title, content FROM content.news WHERE id = $id
}
index news
{
     source             = news
     path               = /var/lib/sphinxsearch/data/news
     docinfo            = extern
     mlock              = 0
     morphology         = stem_ru
     html_strip         = 1
     html_remove_elements = p, style, script
     charset_type       = utf-8
     min_word_len       = 2
}
######################################
#bsntv
######################################
source bsntv : main
{
     sql_db             = content
     
     #запрос, который возвращает диапазон ID строк для последующего вычисления лимита при индексации. Например, 'SELECT MIN(`id`), MAX(`id`) FROM `topics`' вернет минимальный и максимальный ID тем форума, затем диапазон разделится на части, скажем, по 2000. Вернулся результат MIN=5 и MAX=5000, после вставит в первый запрос индексации $start=5, $end=2005, на втором запросе $start=2006, $end=4006 и т.д.
     sql_query_range    = SELECT MIN(id), MAX(id) FROM bsntv
     
     #определяет шаг при лимите выборки. В нашем случае это 500
     sql_range_step     = 500
     
     #запрос выборки информации из базы для индексирования. Пишется в строку. Если вы переносите часть запроса в новую строку, то ставите перед переносом символ "\". Первое возвращаемое поле должно быть целочисленным, положительным и уникальным. Для этого подходит первичный ключ таблицы (оно будет использоваться как ID индексируемой строки). Можно использовать 2 переменные: $start и $end для получения частями информации для индексирования
     sql_query         = \
        SELECT n.id, 'bsntv' as type, UNIX_TIMESTAMP(n.datetime) as datetime, n.title, CONCAT(n.content_short,', ', n.content) as content, n.chpu_title, n.views_count, c.title as category_title, c.code as category_code, IF(YEAR(n.datetime)<Year(CURDATE()),DATE_FORMAT(n.datetime,'%e %M %Y'),DATE_FORMAT(n.datetime,'%e %M, %k:%i')) as normal_date, p.name AS photo, LEFT( p.name, 2 ) AS subfolder,(SELECT COUNT(*) FROM comments WHERE comments_active = 1 AND id_parent = n.id AND parent_type = 9) as comments_count FROM bsntv n LEFT JOIN bsntv_categories c ON c.id = n.id_category LEFT JOIN bsntv_photos p ON p.id = n.id_main_photo WHERE n.id >= $start AND n.id <= $end 

     # Атрибут ID раздела. Необходим для фильтра, если поиск будет по определенной категории
     sql_attr_string    = type
     sql_field_string   = category_title
     sql_field_string   = chpu_title
     sql_field_string   = title
     sql_field_string   = content
     sql_field_string   = normal_date
     sql_field_string   = photo
     sql_field_string   = subfolder
     sql_field_string   = category_code
     sql_field_string   = comments_count
     sql_field_string   = views_count
     sql_attr_timestamp = datetime

     sql_query_info     = SELECT title, content FROM content.bsntv WHERE id = $id
}
index bsntv
{
     source             = bsntv
     path               = /var/lib/sphinxsearch/data/bsntv
     docinfo            = extern
     mlock              = 0
     morphology         = stem_ru
     html_strip         = 1
     html_remove_elements = p, style, script
     charset_type       = utf-8
     min_word_len       = 2
}
######################################
#doverie
######################################
source doverie : main
{
     sql_db             = content

     #запрос, который возвращает диапазон ID строк для последующего вычисления лимита при индексации. Например, 'SELECT MIN(`id`), MAX(`id`) FROM `topics`' вернет минимальный и максимальный ID тем форума, затем диапазон разделится на части, скажем, по 2000. Вернулся результат MIN=5 и MAX=5000, после вставит в первый запрос индексации $start=5, $end=2005, на втором запросе $start=2006, $end=4006 и т.д.
     sql_query_range    = SELECT MIN(id), MAX(id) FROM doverie

     #определяет шаг при лимите выборки. В нашем случае это 500
     sql_range_step     = 500

     #запрос выборки информации из базы для индексирования. Пишется в строку. Если вы переносите часть запроса в новую строку, то ставите перед переносом символ "\". Первое возвращаемое поле должно быть целочисленным, положительным и уникальным. Для этого подходит первичный ключ таблицы (оно будет использоваться как ID индексируемой строки). Можно использовать 2 переменные: $start и $end для получения частями информации для индексирования
     sql_query         = \
        SELECT n.id, 'doverie' as type, UNIX_TIMESTAMP(n.datetime) as datetime, n.title, CONCAT(n.content_short,', ', n.content) as content, n.chpu_title, n.views_count, c.title as category_title, c.code as category_code, IF(YEAR(n.datetime)<Year(CURDATE()),DATE_FORMAT(n.datetime,'%e %M %Y'),DATE_FORMAT(n.datetime,'%e %M, %k:%i')) as normal_date, p.name AS photo, LEFT( p.name, 2 ) AS subfolder,(SELECT COUNT(*) FROM comments WHERE comments_active = 1 AND id_parent = n.id AND parent_type = 9) as comments_count FROM doverie n LEFT JOIN doverie_categories c ON c.id = n.id_category LEFT JOIN doverie_photos p ON p.id = n.id_main_photo WHERE n.id >= $start AND n.id <= $end

     # Атрибут ID раздела. Необходим для фильтра, если поиск будет по определенной категории
     sql_attr_string    = type
     sql_field_string   = category_title
     sql_field_string   = chpu_title
     sql_field_string   = title
     sql_field_string   = content
     sql_field_string   = normal_date
     sql_field_string   = photo
     sql_field_string   = subfolder
     sql_field_string   = category_code
     sql_field_string   = comments_count
     sql_field_string   = views_count
     sql_attr_timestamp = datetime

     sql_query_info     = SELECT title, content FROM content.doverie WHERE id = $id
}
index doverie
{
     source             = doverie
     path               = /var/lib/sphinxsearch/data/doverie
     docinfo            = extern
     mlock              = 0
     morphology         = stem_ru
     html_strip         = 1
     html_remove_elements = p, style, script
     charset_type       = utf-8
     min_word_len       = 2
}

######################################
#opinions
######################################
source opinions : main
{
     sql_db             = content
     
     #запрос, который возвращает диапазон ID строк для последующего вычисления лимита при индексации. Например, 'SELECT MIN(`id`), MAX(`id`) FROM `topics`' вернет минимальный и максимальный ID тем форума, затем диапазон разделится на части, скажем, по 2000. Вернулся результат MIN=5 и MAX=5000, после вставит в первый запрос индексации $start=5, $end=2005, на втором запросе $start=2006, $end=4006 и т.д.
     sql_query_range    = SELECT MIN(id), MAX(id) FROM opinions
     
     #определяет шаг при лимите выборки. В нашем случае это 500
     sql_range_step     = 500
     
     #запрос выборки информации из базы для индексирования. Пишется в строку. Если вы переносите часть запроса в новую строку, то ставите перед переносом символ "\". Первое возвращаемое поле должно быть целочисленным, положительным и уникальным. Для этого подходит первичный ключ таблицы (оно будет использоваться как ID индексируемой строки). Можно использовать 2 переменные: $start и $end для получения частями информации для индексирования
     sql_query         = \
        SELECT n.id, IF(n.type=1,'opinions', IF(n.type=2,'predictions','interview')) as type, UNIX_TIMESTAMP(n.date) as date, n.annotation as title, n.text as content, CONCAT(IF(n.type=1,'opinions', IF(n.type=2,'predictions','interview')), '/', c.url, '/', n.chpu_title) as url, n.views_count, c.title as estate_type, IF(YEAR(n.date)<Year(CURDATE()),DATE_FORMAT(n.date,'%e %M %Y'),DATE_FORMAT(n.date,'%e %M, %k:%i')) as normal_date, p.name AS photo, LEFT( p.name, 2 ) AS subfolder, (SELECT COUNT(*) FROM comments WHERE comments_active = 1 AND id_parent = n.id AND parent_type=4) as comments_count FROM opinions n   LEFT JOIN opinions_estate_types c ON c.id = n.id_estate_type LEFT JOIN opinions_expert_profiles e ON e.id = n.id_expert LEFT JOIN opinions_expert_profiles_photos p ON p.id = e.id_main_photo WHERE n.id >= $start AND n.id <= $end 

     # Атрибут ID раздела. Необходим для фильтра, если поиск будет по определенной категории
     sql_attr_string    = url
     sql_attr_string    = type
     sql_attr_string    = estate_type
     sql_field_string   = title
     sql_field_string   = content
     sql_field_string   = normal_date
     sql_field_string   = photo
     sql_field_string   = subfolder
     sql_field_string   = views_count
     sql_field_string   = comments_count
     sql_attr_timestamp = date

     sql_query_info     = SELECT annotation, text FROM content.opinions WHERE id = $id
}
index opinions
{
     source             = opinions
     path               = /var/lib/sphinxsearch/data/opinions
     docinfo            = extern
     mlock              = 0
     morphology         = stem_ru
     html_strip         = 1
     html_remove_elements = p, style, script
     charset_type       = utf-8
     min_word_len       = 2
}
######################################
#articles
######################################
source articles : main
{
     sql_db             = content
     
     #запрос, который возвращает диапазон ID строк для последующего вычисления лимита при индексации. Например, 'SELECT MIN(`id`), MAX(`id`) FROM `topics`' вернет минимальный и максимальный ID тем форума, затем диапазон разделится на части, скажем, по 2000. Вернулся результат MIN=5 и MAX=5000, после вставит в первый запрос индексации $start=5, $end=2005, на втором запросе $start=2006, $end=4006 и т.д.
     sql_query_range    = SELECT MIN(id), MAX(id) FROM articles
     
     #определяет шаг при лимите выборки. В нашем случае это 500
     sql_range_step     = 500
     
     #запрос выборки информации из базы для индексирования. Пишется в строку. Если вы переносите часть запроса в новую строку, то ставите перед переносом символ "\". Первое возвращаемое поле должно быть целочисленным, положительным и уникальным. Для этого подходит первичный ключ таблицы (оно будет использоваться как ID индексируемой строки). Можно использовать 2 переменные: $start и $end для получения частями информации для индексирования
     sql_query         = \
        SELECT n.id, 'articles' as type, UNIX_TIMESTAMP(n.datetime) as datetime, n.title, CONCAT(n.content_short,', ', n.content) as content, n.chpu_title, n.views_count, c.title as category_title, c.code as category_code, IF(YEAR(n.datetime)<Year(CURDATE()),DATE_FORMAT(n.datetime,'%e %M %Y'),DATE_FORMAT(n.datetime,'%e %M, %k:%i')) as normal_date, p.name AS photo, LEFT( p.name, 2 ) AS subfolder,(SELECT COUNT(*) FROM comments WHERE comments_active = 1 AND id_parent = n.id AND parent_type = 1) as comments_count FROM articles n   LEFT JOIN articles_categories c ON c.id = n.id_category LEFT JOIN articles_photos p ON p.id = n.id_main_photo WHERE n.id >= $start AND n.id <= $end 

     # Атрибут ID раздела. Необходим для фильтра, если поиск будет по определенной категории
     sql_attr_string    = type
     sql_field_string   = category_title
     sql_field_string   = chpu_title
     sql_field_string   = title
     sql_field_string   = content
     sql_field_string   = normal_date
     sql_field_string   = photo
     sql_field_string   = subfolder
     sql_field_string   = category_code
     sql_field_string   = comments_count
     sql_field_string   = views_count
     sql_attr_timestamp = datetime

     sql_query_info     = SELECT title, content FROM content.articles WHERE id = $id
}
index articles
{
     source             = articles
     path               = /var/lib/sphinxsearch/data/articles
     docinfo            = extern
     mlock              = 0
     morphology         = stem_ru
     html_strip         = 1
     html_remove_elements = p, style, script
     charset_type       = utf-8
     min_word_len       = 2
}
# Индексатор
indexer
{
     # Сколько памяти выделяем для индексатора
     mem_limit  = 512M
}

# поисковый демон (служба)
searchd
{
    #address = localhost

    # какой порт и какой протокол "слушает" служба
    listen = localhost:9312
    # listen = 127.0.0.1:3312

    # файл с логами
    log = /var/log/sphinxsearch/searchd.log

    # файл с логами поисковых запросов
    query_log = /var/log/sphinxsearch/query.log

    # Время в секундах, которое ждет демон при обмене данными с клиентом. По исчерпании происходит разрыв коннекта
    read_timeout = 5

    # максимальное число одновременных потоков поиска. '0' - неограниченно
    max_children  = 30

    # максимальное число найденных документов
    max_matches   = 1000

    # максимальное число фильтров
    max_filters  = 256

    # PID file, searchd process ID file name
    # mandatory
    pid_file = /var/run/sphinxsearch/searchd.pid
	compat_sphinxql_magics = 0
}

